select * from employees;

create table EMP( 
    EMP_NO VARCHAR2(30) NOT NULL,
    EMP_NAME VARCHAR2(80) NOT NULL,
    SALARY NUMBER,
    HIRE_DATE DATE NULL
);

drop table emp;

commit;

DESC EMP;

ALTER TABLE EMP
add EMP_NAME3 VARCHAR2(80);

ALTER TABLE EMP
ADD EMP_NAME2 VARCHAR2(50) NOT NULL;

ALTER TABLE EMP
DROP COLUMN EMP_NAME3;

DROP TABLE EMP;

-- 2-1. Table

CREATE TABLE DEPT_TEST(
    DEPT_NO NUMBER NOT NULL,
    DEPT_NAME VARCHAR2(50) NOT NULL,
    DEPT_DESC VARCHAR2(100),
    CREATE_DATE DATE);
    
ALTER TABLE DEPT_TEST
ADD CONSTRAINTS PK_DEPT_TEST PRIMARY KEY (DEPT_NO);

DESC DEPT_TEST;

SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DEPT_TEST';

ALTER TABLE DEPT_TEST
ADD DEPT_DESC1 VARCHAR2(80);

ALTER TABLE DEPT_TEST
DROP COLUMN DEPT_DESC1;

-- QUIZ

--2.
CREATE TABLE COUNTRY_TEST(
    COUNTRY_ID NUMBER NOT NULL PRIMARY KEY,
    COUNTRY_NAME VARCHAR2(100) NOT NULL);
    
--3.
ALTER TABLE COUNTRY_TEST
ADD REGION_ID NUMBER NULL;

-- 4.
ALTER TABLE COUNTRY_TEST
MODIFY REGION_ID NOT NULL;

--5.
DROP TABLE COUNTRY_TEST;



-- 2-2. Select문

SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;

-- 사번이 100 인 사원을 조회
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = 100;

-- 사번이 100 이 아닌 사원을 조회
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID <> 100;
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID != 100;

-- 사번이 100 보다 크고 JOB_ID 가 ST_CLERK 인 사원을 조회
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID > 100 AND JOB_ID ='ST_CLERK';

-- 급여가 5000 이상인 사원
SELECT * FROM EMPLOYEES WHERE SALARY >= 5000;

-- 사원의 사번과 이름, 급여를 급여가 5000 이상인 사원 중 급여가 높은 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES WHERE SALARY >= 5000;

-- 급여가 2400 이하거나 20000 이상인 사원 조회
SELECT * FROM EMPLOYEES WHERE SALARY <= 2400 OR SALARY >= 20000;

-- LAST_NAME 이 Grant 인 사원 조회
SELECT * FROM EMPLOYEES WHERE LAST_NAME ='Grant';

-- ORDER BY 절
-- 사번 순서대로 정렬
SELECT * FROM EMPLOYEES ORDER BY EMPLOYEE_ID ASC;

-- 사번 내림차순 정렬
SELECT * FROM EMPLOYEES ORDER BY EMPLOYEE_ID DESC;

-- 이름, 성 순으로 오름차순 정렬
SELECT * FROM EMPLOYEES ORDER BY FIRST_NAME, LAST_NAME;

-- 이름 오름차순 / 성 내림차순 정렬
SELECT * FROM EMPLOYEES ORDER BY FIRST_NAME ASC, LAST_NAME DESC;

-- 사원의 사번과 이름, 급여를 급여가 5000 이상인 급여가 높은 순서로 조회
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES 
WHERE SALARY >= 5000 ORDER BY SALARY DESC;

-- 컬럼을 숫자로 지정해서 정렬
SELECT * FROM EMPLOYEES ORDER BY 2, 3 DESC;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL FROM EMPLOYEES
ORDER BY 2, 3, PHONE_NUMBER;

-- NULLS FIRST
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, COMMISSION_PCT FROM EMPLOYEES
ORDER BY COMMISSION_PCT NULLS FIRST;

-- NULLS LAST
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, COMMISSION_PCT FROM EMPLOYEES
ORDER BY COMMISSION_PCT NULLS LAST;


-- QUIZ
-- 1. O
-- 2. 아무런 결과도 조회되지 않는다.
-- 3. X, ORDER BY 절은 오름차순 정렬이 기본이다.
-- 4. 
DESC LOCATIONS;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'LOCATIONS';
-- LOCATION_ID NUMBER(4) NOT NULL PK
-- STREET_ADDRESS VARCHAR2(40) NULL
-- POSTAL_CODE VARCHAR2(12) NULL
-- CITY VARCHAR2(30) NOT NULL
-- STATE_PROVINCE VARCHAR2(25) NULL
-- COUNTRY_ID CHAR(2) NULL

-- 5.
SELECT * FROM LOCATIONS WHERE LOCATION_ID >= 2000 AND LOCATION_ID < 3000 ;

-- 6. 
SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME = 'David' AND SALARY >= 6000;
SELECT LOCATION_ID  FROM DEPARTMENTS WHERE DEPARTMENT_ID = 80;
SELECT CITY FROM LOCATIONS WHERE LOCATION_ID = 2500;

SELECT DISTINCT A.CITY FROM LOCATIONS A 
    JOIN DEPARTMENTS B ON A.LOCATION_ID = B.LOCATION_ID
    JOIN EMPLOYEES C ON B.DEPARTMENT_ID = C.DEPARTMENT_ID
WHERE C.FIRST_NAME = 'David' AND SALARY >= 6000;


-- 2-3. 연산자
SELECT 1+1, 1-1 FROM DUAL;

SELECT 1+1 test1, 1-1 test2 from dual;

SELECT 'A'||'B', 'C'||'D'||'E' FROM DUAL;

SELECT FIRST_NAME ||' '|| LAST_NAME AS FULL_NAME FROM EMPLOYEES;

-- 비교 연산자
-- 동등
SELECT * FROM EMPLOYEES WHERE SALARY = 2500;

-- 비동등
SELECT * FROM EMPLOYEES WHERE SALARY <> 2500;

-- 부등호
SELECT * FROM EMPLOYEES WHERE SALARY > 3000 ORDER BY SALARY;
SELECT * FROM EMPLOYEES WHERE SALARY >= 3000 ORDER BY SALARY;

SELECT * FROM EMPLOYEES WHERE SALARY >= 3000 AND SALARY <= 5000 ORDER BY SALARY;
SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 3000 AND 5000 ORDER BY SALARY;

-- NOT
SELECT * FROM EMPLOYEES WHERE NOT (SALARY = 2500) ORDER BY SALARY;

-- NULL
-- IS NULL / IS NOT NULL

SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT = NULL;
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT = '';
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NULL;
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL;

-- LIKE
SELECT * FROM EMPLOYEES WHERE PHONE_NUMBER LIKE '011%';
SELECT * FROM EMPLOYEES WHERE PHONE_NUMBER LIKE '%9';
SELECT * FROM EMPLOYEES WHERE PHONE_NUMBER LIKE '%124%';

-- IN
SELECT * FROM EMPLOYEES WHERE JOB_ID IN ('IT_PROG', 'AD_VP', 'FI_ACCOUNT');
SELECT * FROM EMPLOYEES WHERE JOB_ID NOT IN ('IT_PROG', 'AD_VP', 'FI_ACCOUNT');


-- CASE
-- 단순형
SELECT COUNTRY_ID, COUNTRY_NAME, 
    CASE REGION_ID
        WHEN 1 THEN '유럽'
        WHEN 2 THEN '아메리카'
        WHEN 3 THEN '아시아'
        WHEN 4 THEN '중동 및 아프리카'
    END AS REGION_NAME
FROM COUNTRIES;

-- 검색형
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, JOB_ID,
    CASE 
        WHEN SALARY BETWEEN 1 AND 5000 THEN '낮음'
        WHEN SALARY BETWEEN 5001 AND 10000 THEN '중간'
        WHEN SALARY BETWEEN 10001 AND 15000 THEN '높음'
        ELSE '최상위'
    END SALARY_RANK
FROM EMPLOYEES;


SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, JOB_ID,
    CASE 
        WHEN SALARY BETWEEN 1 AND 5000 THEN '낮음'
        WHEN SALARY BETWEEN 5001 AND 10000 THEN '중간'
        WHEN SALARY BETWEEN 10001 AND 15000 THEN '높음'
        ELSE 9
    END SALARY_RANK
FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, JOB_ID,
    CASE 
        WHEN SALARY BETWEEN 1 AND 5000 THEN 1
        WHEN SALARY BETWEEN 5001 AND 10000 THEN 2
        WHEN SALARY BETWEEN 10001 AND 15000 THEN 3
        ELSE 9
    END SALARY_RANK
FROM EMPLOYEES;

-- 의사 컬럼
-- ROWNUM
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, ROWNUM FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, ROWNUM FROM EMPLOYEES
WHERE ROWNUM <=5;


-- QUIZ
-- 1.
SELECT * FROM EMPLOYEES WHERE MANAGER_ID IS NULL;

-- 2.
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, 
    CASE 
        WHEN COMMISSION_PCT IS NULL THEN SALARY
        WHEN COMMISSION_PCT IS NOT NULL THEN SALARY + (SALARY * COMMISSION_PCT)
    END SAL_COMM
FROM EMPLOYEES;

-- 3. 0건
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME FROM EMLOYEES WHERE ROWNUM <1;

-- 4.
SELECT CITY FROM LOCATIONS WHERE CITY LIKE 'S%' ORDER BY 1 DESC;

-- 5.
DESC LOCATIONS;
SELECT POSTAL_CODE || ' - ' || STREET_ADDRESS || ' - ' || CITY || ' - ' || STATE_PROVINCE || ' - ' || COUNTRY_ID AS "주소" FROM LOCATIONS;

-- 6.
SELECT POSTAL_CODE || ' - ' || STREET_ADDRESS || ' - ' || CITY || ' - ' || STATE_PROVINCE || ' - ' || COUNTRY_ID AS "주소" FROM LOCATIONS
WHERE POSTAL_CODE IS NOT NULL AND COUNTRY_ID = 'UK';
